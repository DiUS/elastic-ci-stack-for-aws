
## Provides the infrastructure for a scalable buildkite cluster

Parameters:
  KeyName:
    Description: The ssh keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName

  BuildkiteOrgSlug:
    Description: Your Buildkite organization slug
    Type: String

  BuildkiteAgentToken:
    Description: Your Buildkite agent token from Buildkite.com
    Type: String
    NoEcho: true

  BuildkiteQueue:
    Description: The queue metadata to register the agent with
    Type: String
    Default: elastic

  DockerVersion:
    Description: The docker version to run, depends on a matching tag on the buildkite-agent image
    Type: String
    Default: "1.8"

  ProvisionBucket:
    Description: An s3 bucket containing id_rsa_buildkite
    Type: String

  AuthorizedUsersUrl:
    Description: Optional - An url to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of three existing VPC Subnet Ids where ECS instances will run.  Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma-delimited list of VPC availability zones in which to create subnets.  Required if setting VpcId.
    Default: ""

  InstanceType:
    Description: The type of instance to use for the agent
    Type: String
    Default: m3.medium
    AllowedValues:
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge

  SpotPrice:
    Description: An optional spot price to use for the agents, if 0 normal instances are used
    Type: String
    Default: 0

  MaxSize:
    Description: The maximum number of agents to launch
    Type: Number
    Default: 6

  MinSize:
    Description: The minumum number of agents to launch
    Type: Number
    Default: 1

  AgentsPerHost:
    Description: The number of buildkite agents to run per host
    Type: Number
    Default: 6

  RootVolumeSize:
    Description: Size of EBS volume for root filesystem in GB.
    Type: Number
    Default: 250

  RootVolumeIops:
    Description: Provisioned IOPS for the root volume. You get 3 free for each GB
    Type: Number
    Default: 750

  SecurityGroupId:
    Type: String
    Description: Optional - Existing security group to associate the container instances. Creates one by default.
    Default: ""

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

    CreateVpcResources:
      !Equals [ $(VpcId), "" ]

    CreateSecurityGroup:
      !Equals [ $(SecurityGroupId), "" ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", $(AvailabilityZones) ], "" ]  ]

Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  # Policies for the agent instances
  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource: "arn:aws:s3:::$(ProvisionBucket)/*"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups: [ !If [ "CreateSecurityGroup", $(SecurityGroup), $(SecurityGroupId) ] ]
      KeyName : $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId : $(AWSArch2AMI[$(AWS::Region)][$(AWSInstanceType2Arch[$(InstanceType)][Arch])])
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2, Iops: $(RootVolumeIops) }
      UserData: !Base64 |
        #!/bin/bash -xv
        /usr/local/bin/cfn-init -s $(AWS::StackId) -r AgentLaunchConfiguration --region $(AWS::Region)
        /usr/local/bin/cfn-signal -e \$? -r 'cfn-init finished' \
          --stack $(AWS::StackName) --resource 'AgentAutoScaleGroup' --region $(AWS::Region)

    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: $(IAMRole)
          buckets: $(ProvisionBucket)

      # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            "/root/.ssh/id_rsa":
              source: "https://$(ProvisionBucket).s3.amazonaws.com/id_rsa_buildkite"
              mode: '000400'
              owner: root
              group: root
              authentication: S3AccessCreds
            "/home/ubuntu/buildkite/hooks/environment":
              content: |
                #!/bin/bash -eu
                if [[ -f ~/.docker/config.json || -f ~/.dockercfg ]] ; then
                  docker logout
                fi
                if [[ -n "\${DOCKER_HUB_AUTH:-}" ]] ; then
                  echo "DOCKER_HUB_AUTH is no longer supported, use DOCKER_HUB_USER, DOCKER_HUB_PASSWORD and DOCKER_HUB_EMAIL."
                  exit 1
                elif [[ -n "\${DOCKER_HUB_USER:-}" && -n "\${DOCKER_HUB_PASSWORD:-}" && -n "\${DOCKER_HUB_EMAIL:-}" ]] ; then
                  echo "~~~ Authenticating with docker hub as \$DOCKER_HUB_USER"
                  docker login --username="\$DOCKER_HUB_USER" --password="\$DOCKER_HUB_PASSWORD" --email="\$DOCKER_HUB_EMAIL"
                fi
                echo "~~~ Stopping existing docker containers"
                if [[ \$(docker ps -q | wc -l) -gt 0 ]] ; then
                  docker stop \$(docker ps -q)
                fi
              mode: '000700'
              owner: ubuntu
              group: ubuntu
            "/lib/systemd/system/ssh-agent.service":
              content: |
                [Unit]
                Description=ssh-agent
                Before=docker.service
                [Service]
                Type=forking
                Environment=SSH_AUTH_SOCK=/ssh-agent
                ExecStart=/usr/bin/ssh-agent -a \$SSH_AUTH_SOCK
                ExecStartPost=/usr/bin/ssh-add /root/.ssh/id_rsa
                [Install]
                WantedBy=default.target
              mode: '000400'
              owner: root
              group: root
            "/home/ubuntu/docker-compose.yml":
              content: |
                buildkite:
                  image: buildkite/agent:dind-$(DockerVersion)
                  privileged: true
                  environment:
                    - BUILDKITE_AGENT_TOKEN=$(BuildkiteAgentToken)
                    - BUILDKITE_AGENT_META_DATA=queue=$(BuildkiteQueue),docker=$(DockerVersion)
                    - BUILDKITE_AGENT_NAME=elastic-%hostname-%n
                    - DOCKER_STORAGE_DRIVER=aufs
                    - SSH_AUTH_SOCK=/ssh-agent
                  volumes:
                    - /home/ubuntu/buildkite/hooks:/buildkite/hooks
                    - /ssh-agent:/ssh-agent
                  restart: always
              mode: '000600'
              owner: ubuntu
              group: ubuntu
            "/etc/cron.hourly/authorized_keys":
              content: |
                #!/bin/bash -eu
                test -z "$(AuthorizedUsersUrl)" && exit 0
                curl --silent -f "$(AuthorizedUsersUrl)" > /tmp/authorized_keys
                mv /tmp/authorized_keys /home/ubuntu/.ssh/authorized_keys
                chmod 600 /home/ubuntu/.ssh/authorized_keys
                chown ubuntu: /home/ubuntu/.ssh/authorized_keys
              mode: '000700'
              owner: root
              group: root
            "/etc/cron.d/cloudwatch":
              content: |
                */2 * * * * root perl /usr/local/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --disk-path=/var/lib/docker --from-cron
              mode: '000700'
              owner: root
              group: root

          commands:
            01-enable-ssh-agent-systemd:
              command: |
                systemctl daemon-reload
                systemctl enable ssh-agent
                systemctl start ssh-agent
            02-install-buildkite:
              command: |
                docker-compose -f /home/ubuntu/docker-compose.yml pull
                docker-compose -f /home/ubuntu/docker-compose.yml up -d buildkite
                docker-compose -f /home/ubuntu/docker-compose.yml scale buildkite=$(AgentsPerHost)
            03-fetch-authorized-users:
              command: /etc/cron.hourly/authorized_keys


  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        "CreateVpcResources",
        [ $(Subnet0), $(Subnet1), $(Subnet2) ],
        $(Subnets)
      ]
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      Tags:
        - { Key: Role, Value: buildkite-agent, PropagateAtLaunch: true }
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: $(MinSize)
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  AgentScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      Cooldown: 60
      ScalingAdjustment: 1

  AgentScaleDownPolicy:
    Type : AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      Cooldown : 60
      ScalingAdjustment : -1

  CPUAlarmHigh:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [ $(AgentScaleUpPolicy) ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: $(AgentAutoScaleGroup)
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [ $(AgentScaleDownPolicy) ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: $(AgentAutoScaleGroup)
      ComparisonOperator: LessThanThreshold

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: !If [ "CreateVpcResources", $(Vpc), $(VpcId) ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: $(AWS::StackName)

  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: $(Gateway)
      VpcId: $(Vpc)

  Subnet0:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 0, $(AvailabilityZones) ],
        !Select [ 0, !GetAZs '$(AWS::Region)' ]
      ]
      CidrBlock: 10.0.1.0/24
      VpcId: $(Vpc)

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 1, $(AvailabilityZones) ],
        !Select [ 1, !GetAZs '$(AWS::Region)' ]
      ]
      CidrBlock: 10.0.2.0/24
      VpcId: $(Vpc)

  Subnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 2, $(AvailabilityZones) ],
        !Select [ 2, !GetAZs '$(AWS::Region)' ]
      ]
      CidrBlock: 10.0.3.0/24
      VpcId: $(Vpc)

  Routes:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: $(Vpc)

  RouteDefault:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: $(Gateway)
      RouteTableId: $(Routes)

  Subnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet0)
      RouteTableId: $(Routes)

  Subnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet1)
      RouteTableId: $(Routes)

  Subnet2Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet2)
      RouteTableId: $(Routes)
